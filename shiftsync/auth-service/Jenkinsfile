pipeline {
  agent any

  environment {
    IMAGE_NAME           = "australia-southeast1-docker.pkg.dev/shiftsync-gcp/shiftsync-repo/auth-service"
    REGISTRY_CREDENTIALS = credentials('gcp-artifact-creds')
    JWT_SECRET           = credentials('jwt-secret')
    DEPLOY_CREDENTIALS   = credentials('jenkins-release-sa-key')
    GCP_PROJECT          = "shiftsync-gcp"
    GKE_CLUSTER          = "shiftsync-cluster"
    GKE_ZONE             = "australia-southeast1-b"
    K8S_NAMESPACE        = "default"
    CLOUDDEPLOY_REGION   = "australia-southeast1"
  }

  stages {
    stage('Build & Push Docker Image') {
      steps {
        script {
          def dockerLogin = 'echo %REGISTRY_CREDENTIALS_PSW% | docker login -u _json_key --password-stdin https://australia-southeast1-docker.pkg.dev'
          bat """
            cd shiftsync\\auth-service
            docker build -t ${IMAGE_NAME}:latest .
            ${dockerLogin}
            docker push ${IMAGE_NAME}:latest
          """
        }
      }
    }

    stage('Run Unit Tests') {
      steps {
        bat """
          cd shiftsync\\auth-service
          npm install
          npm test
        """
      }
    }

    stage('Code Quality Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
          bat '''
            cd shiftsync\\auth-service
            curl -Lo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-windows.zip
            powershell -Command "Expand-Archive -Path sonar-scanner.zip -DestinationPath . -Force"
            .\\sonar-scanner-5.0.1.3006-windows\\bin\\sonar-scanner.bat -Dsonar.token=%SONAR_TOKEN% -Dsonar.host.url=https://sonarcloud.io -Dproject.settings=sonar-project.properties
          '''
        }
      }
    }

    stage('Security Analysis') {
      steps {
        script {
          bat """
            cd shiftsync\\auth-service
            npm install
            npm audit --audit-level=high
          """
        }
      }
    }

        stage('Deploy to GKE') {
      steps {
        withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCLOUD_KEY')]) {
          bat """
            REM ─ Authenticate to GCP
            gcloud auth activate-service-account --key-file="%GCLOUD_KEY%"
            gcloud config set project %GCP_PROJECT%

            REM ─ Fetch kubeconfig for your cluster
            gcloud container clusters get-credentials %GKE_CLUSTER% --zone %GKE_ZONE%

            REM ─ Deploy your manifests (which can reference ${JWT_SECRET} via a k8s Secret)
            kubectl apply -n %K8S_NAMESPACE% -f "%WORKSPACE%\\kube\\auth-deployment.yaml"
            kubectl apply -n %K8S_NAMESPACE% -f "%WORKSPACE%\\kube\\auth-service.yaml"

            REM ─ Wait for a successful rollout
            kubectl rollout status deployment/auth-service -n %K8S_NAMESPACE%
          """
        }
      }
    }

   stage('Release to Production') {
      steps {
        withCredentials([file(credentialsId: 'jenkins-release-sa-key', variable: 'GCLOUD_KEY')]) {
          bat """
            gcloud auth activate-service-account --key-file=%GCLOUD_KEY%
            gcloud config set project %GCP_PROJECT%

            REM Apply/update Cloud Deploy pipeline
            gcloud deploy apply --file=%WORKSPACE%\\clouddeploy.yaml --region=%CLOUDDEPLOY_REGION%

            REM Create a new release from our latest image
            gcloud deploy releases create "r${BUILD_NUMBER}" \
              --delivery-pipeline=auth-service-pipeline \
              --region=%CLOUDDEPLOY_REGION% \
              --images auth-service=%IMAGE_NAME%:latest
          """
        }
      }
    }

  }
}